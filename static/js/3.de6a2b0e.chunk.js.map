{"version":3,"sources":["components/views/Contacts/Contacts.module.css","components/Form/Form.module.css","components/Section/index.jsx","components/Form/Input/index.jsx","components/Form/Button/index.jsx","components/Form/index.js","components/List/index.jsx","redux/contacts/contactsOperations.js","redux/contacts/contactSelectors.js","components/views/Contacts/index.js"],"names":["module","exports","Section","children","title","Input","this","props","name","changeInputForFilter","changeInput","value","isOpen","arr","splice","toUpperCase","CSSTransition","in","timeout","classNames","unmountOnExit","htmlFor","onChange","type","id","Component","Button","text","deleteContact","onClick","Form","state","number","evt","setState","prevState","target","addContact","className","styles","form","onSubmit","List","contacts","filter","length","contact","toLowerCase","includes","TransitionGroup","component","map","el","axios","defaults","baseURL","dispatch","fetchContactsRequest","get","then","data","fetchContactsSuccess","catch","error","fetchContactsError","addContactRequest","post","addContactSuccess","addContactError","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","getFilter","getContacts","items","Contacts","errorText","preventDefault","setTimeout","undefined","find","a","fetchContacts","container","appear","changeFilter","connect","contactsOperations","e"],"mappings":"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","file":"static/js/3.de6a2b0e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Contacts_title__vO59W\",\"error\":\"Contacts_error__29P0H\",\"appear\":\"Contacts_appear__ZQCDL\",\"appearActive\":\"Contacts_appearActive__AcIrF\",\"enter\":\"Contacts_enter__Z5mII\",\"enterActive\":\"Contacts_enterActive__ScSZJ\",\"exit\":\"Contacts_exit__3aKHp\",\"exitActive\":\"Contacts_exitActive__kwxlQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__2TM1N\"};","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Section = ({ children, title }) => {\n  return (\n    <>\n      {title && <h2>{title}</h2>}\n      <section>{children}</section>\n    </>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n};\n\nexport default Section;\n","import React, { Component } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport \"./Filter.css\";\n\nexport class Input extends Component {\n  render() {\n    const {\n      name,\n      changeInputForFilter,\n      changeInput,\n      value,\n      isOpen,\n    } = this.props;\n    const arr = [...name];\n    arr.splice(0, 1, arr[0].toUpperCase());\n    if (name === \"filter\") {\n      return (\n        <>\n          <CSSTransition\n            in={isOpen}\n            timeout={250}\n            classNames=\"label\"\n            unmountOnExit\n          >\n            <label htmlFor={name}>{arr}</label>\n          </CSSTransition>\n          <CSSTransition\n            in={isOpen}\n            timeout={250}\n            classNames=\"form\"\n            unmountOnExit\n          >\n            <input\n              onChange={name === \"filter\" ? changeInputForFilter : changeInput}\n              type=\"text\"\n              id={name}\n              value={value}\n            />\n          </CSSTransition>\n        </>\n      );\n    } else {\n      return (\n        <>\n          <label htmlFor={name}>{arr}</label>\n          <input onChange={changeInput} type=\"text\" id={name} value={value} />\n        </>\n      );\n    }\n  }\n}\n\nexport default Input;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Button = ({ text, deleteContact, id }) => {\n  return (\n    <>\n      <button\n        id={deleteContact ? id : null}\n        onClick={deleteContact ? () => deleteContact(id) : null}\n        type=\"submit\"\n      >\n        {text}\n      </button>\n    </>\n  );\n};\n\nButton.propTypes = {\n  text: PropTypes.string,\n};\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport Input from \"./Input\";\nimport Button from \"./Button\";\nimport styles from \"./Form.module.css\";\n\nexport default class Form extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n  changeInput = (evt) => {\n    this.setState((prevState) => {\n      return {\n        ...prevState,\n        [evt.target.id]: evt.target.value,\n      };\n    });\n  };\n  render() {\n    const { addContact } = this.props;\n    return (\n      <form\n        className={styles.form}\n        onSubmit={(evt) => {\n          this.setState({ name: \"\", number: \"\" });\n          return addContact(evt, this.state);\n        }}\n      >\n        <Input\n          name=\"name\"\n          changeInput={this.changeInput}\n          value={this.state.name}\n        />\n        <Input\n          name=\"number\"\n          changeInput={this.changeInput}\n          value={this.state.number}\n        />\n        <Button state={this.state} text=\"Add contact\" addContact={addContact} />\n      </form>\n    );\n  }\n}\n","import React from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport Button from \"../Form/Button\";\nimport \"./List.css\";\n\nconst List = ({ contacts, filter, deleteContact }) => {\n  if (filter.length > 0) {\n    contacts = contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n  return (\n    <TransitionGroup component=\"ul\">\n      {contacts.map((el) => {\n        return (\n          <CSSTransition key={el.id} timeout={250} classNames=\"item\">\n            <li>\n              <span>{el.name}</span>: <span>{el.number} </span>\n              <Button deleteContact={deleteContact} text=\"Delete\" id={el.id} />\n            </li>\n          </CSSTransition>\n        );\n      })}\n    </TransitionGroup>\n  );\n};\n\nexport default List;\n","import axios from \"axios\";\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} from \"./contactsActions\";\n\naxios.defaults.baseURL = \"https://goit-phonebook-api.herokuapp.com\";\n\nconst fetchContacts = () => (dispatch) => {\n  dispatch(fetchContactsRequest());\n\n  axios\n    .get(\"/contacts\")\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\n    .catch((error) => dispatch(fetchContactsError(error)));\n};\n\nconst addContact = (contact) => (dispatch) => {\n  dispatch(addContactRequest());\n\n  axios\n    .post(\"/contacts\", contact)\n    .then(({ data }) => dispatch(addContactSuccess(data)))\n    .catch((error) => dispatch(addContactError(error)));\n};\n\nconst deleteContact = (id) => (dispatch) => {\n  dispatch(deleteContactRequest());\n\n  axios\n    .delete(`contacts/${id}`)\n    .then(() => dispatch(deleteContactSuccess(id)))\n    .catch((error) => dispatch(deleteContactError(error)));\n};\n\nexport default {\n  fetchContacts,\n  addContact,\n  deleteContact,\n};\n","export const getFilter = (state) => state.contacts.filter;\nexport const getContacts = (state) => state.contacts.items;\n","import { CSSTransition } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport \"./normalize.css\";\nimport styles from \"./Contacts.module.css\";\nimport Section from \"../../Section\";\nimport Input from \"../../Form/Input\";\nimport Form from \"../../Form\";\nimport List from \"../../List\";\nimport \"./sectionAnimation.css\";\n\nimport { changeFilter } from \"../../../redux/contacts/contactsActions\";\nimport contactsOperations from \"../../../redux/contacts/contactsOperations\";\nimport {\n  getFilter,\n  getContacts,\n} from \"../../../redux/contacts/contactSelectors\";\nimport { Component } from \"react\";\n\nexport class Contacts extends Component {\n  state = {\n    error: false,\n    errorText: null,\n  };\n\n  async componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  addContact = (evt, state) => {\n    evt.preventDefault();\n    const name = state.name;\n    const number = state.number;\n    if ((number.length || name.length) === 0) {\n      this.setState({ errorText: `Enter all empties`, error: true });\n      setTimeout(() => {\n        this.setState({ error: false });\n      }, 5000);\n      return;\n    }\n    const dublicated = this.props.contacts.find((el) => {\n      return el.name === name;\n    });\n    if (!(dublicated === undefined)) {\n      this.setState({ errorText: `You already add ${name}`, error: true });\n      setTimeout(() => {\n        this.setState({ error: false });\n      }, 5000);\n      return;\n    } else {\n      this.props.addContact({\n        name: name,\n        number: number,\n      });\n    }\n  };\n  render() {\n    return (\n      <div className={styles.container}>\n        <CSSTransition\n          in={this.state.error !== false}\n          timeout={300}\n          classNames={styles}\n          unmountOnExit\n        >\n          <div className={styles.error}>{this.state.errorText}</div>\n        </CSSTransition>\n        <CSSTransition\n          in={true}\n          timeout={500}\n          appear={true}\n          classNames={styles}\n          unmountOnExit\n        >\n          <h1 className={styles.title}>Phonebook</h1>\n        </CSSTransition>\n        <Form addContact={this.addContact} />\n        <CSSTransition\n          in={this.props.contacts.length > 0}\n          timeout={250}\n          classNames=\"section\"\n          unmountOnExit\n        >\n          <Section title=\"Contacts\">\n            <Input\n              name=\"filter\"\n              isOpen={this.props.contacts.length > 1}\n              changeInputForFilter={this.props.changeFilter}\n            />\n\n            <List\n              contacts={this.props.contacts}\n              filter={this.props.filter}\n              deleteContact={this.props.deleteContact}\n            />\n          </Section>\n        </CSSTransition>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  filter: getFilter(state),\n  contacts: getContacts(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n  changeFilter: (e) => dispatch(changeFilter(e.target.value)),\n  addContact: (contact) => dispatch(contactsOperations.addContact(contact)),\n  deleteContact: (id) => dispatch(contactsOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\n"],"sourceRoot":""}